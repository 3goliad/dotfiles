#!/usr/bin/env python3

import sys
from pathlib import Path
from xdg import BaseDirectory
from xdg.DesktopEntry import DesktopEntry
from fnmatch import fnmatch
import argparse

def desktop_file_id(file_path, data_dir):
    relative_path = str(file_path.relative_to(data_dir))
    return relative_path.removeprefix("applications/").replace('/', '-')

def find_desktop_entries():
    entries = {}
    data_dirs = [Path(d) for d in BaseDirectory.xdg_data_dirs]
    for data_dir in data_dirs:
        if not data_dir.is_dir():
            continue
        for entry_path in data_dir.glob('applications/**/*.desktop'):
            if not entry_path.is_file():
                continue
            id = desktop_file_id(entry_path, data_dir)
            entry = DesktopEntry(entry_path)
            entry_name = entry.getName()
            if id in entries:
                override = entries[id]
                print('WARNING: overridden desktop entry!', file=sys.stderr)
                print(f"\tID={id} Name={entry_name}", file=sys.stderr)
                print(f"\tOverride: {override.filename}", file=sys.stderr)
                print(f"\tHidden: {entry_path}", file=sys.stderr)
            else:
                entries[id] = entry

    return entries

if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog='xdg-desktop-entries-list')
    parser.add_argument("-v", "--verbose", action='store_true')
    parser.add_argument("patterns", nargs='*')
    args = parser.parse_args()

    if args.verbose:
        print("ID\tName\tFilename")

    for id, entry in find_desktop_entries().items():
        fields = [id, entry.getName(), str(entry.filename)]

        pattern_matched = not bool(args.patterns)
        for pattern in args.patterns:
            for field in fields:
                pattern_matched = pattern_matched or fnmatch(field, pattern)

        if not pattern_matched:
            continue

        if args.verbose:
            row = "\t".join(fields)
            print(row)
        else:
            print(entry.getName())
